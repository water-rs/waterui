// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(waterui_mediaFFI)
import waterui_mediaFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_waterui_media_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_waterui_media_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureWateruiMediaInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol FfiComputedLivePhotoSourceProtocol: AnyObject, Sendable {
    
    func compute()  -> LivePhotoSource
    
}
open class FfiComputedLivePhotoSource: FfiComputedLivePhotoSourceProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_media_fn_clone_fficomputedlivephotosource(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_media_fn_free_fficomputedlivephotosource(pointer, $0) }
    }

    

    
open func compute() -> LivePhotoSource  {
    return try!  FfiConverterTypeLivePhotoSource_lift(try! rustCall() {
    uniffi_waterui_media_fn_method_fficomputedlivephotosource_compute(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIComputedLivePhotoSource: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiComputedLivePhotoSource

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedLivePhotoSource {
        return FfiComputedLivePhotoSource(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiComputedLivePhotoSource) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiComputedLivePhotoSource {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiComputedLivePhotoSource, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedLivePhotoSource_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedLivePhotoSource {
    return try FfiConverterTypeFFIComputedLivePhotoSource.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedLivePhotoSource_lower(_ value: FfiComputedLivePhotoSource) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIComputedLivePhotoSource.lower(value)
}






public protocol FfiComputedMediaFilterProtocol: AnyObject, Sendable {
    
    func compute()  -> MediaFilter
    
}
open class FfiComputedMediaFilter: FfiComputedMediaFilterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_media_fn_clone_fficomputedmediafilter(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_media_fn_free_fficomputedmediafilter(pointer, $0) }
    }

    

    
open func compute() -> MediaFilter  {
    return try!  FfiConverterTypeMediaFilter_lift(try! rustCall() {
    uniffi_waterui_media_fn_method_fficomputedmediafilter_compute(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIComputedMediaFilter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiComputedMediaFilter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedMediaFilter {
        return FfiComputedMediaFilter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiComputedMediaFilter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiComputedMediaFilter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiComputedMediaFilter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedMediaFilter_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedMediaFilter {
    return try FfiConverterTypeFFIComputedMediaFilter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedMediaFilter_lower(_ value: FfiComputedMediaFilter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIComputedMediaFilter.lower(value)
}






public protocol FfiComputedSelectedProtocol: AnyObject, Sendable {
    
    func compute()  -> Selected
    
}
open class FfiComputedSelected: FfiComputedSelectedProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_media_fn_clone_fficomputedselected(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_media_fn_free_fficomputedselected(pointer, $0) }
    }

    

    
open func compute() -> Selected  {
    return try!  FfiConverterTypeSelected_lift(try! rustCall() {
    uniffi_waterui_media_fn_method_fficomputedselected_compute(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIComputedSelected: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiComputedSelected

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedSelected {
        return FfiComputedSelected(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiComputedSelected) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiComputedSelected {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiComputedSelected, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedSelected_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedSelected {
    return try FfiConverterTypeFFIComputedSelected.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedSelected_lower(_ value: FfiComputedSelected) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIComputedSelected.lower(value)
}






public protocol FfiComputedVideoProtocol: AnyObject, Sendable {
    
    func compute()  -> Video
    
}
open class FfiComputedVideo: FfiComputedVideoProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_media_fn_clone_fficomputedvideo(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_media_fn_free_fficomputedvideo(pointer, $0) }
    }

    

    
open func compute() -> Video  {
    return try!  FfiConverterTypeVideo_lift(try! rustCall() {
    uniffi_waterui_media_fn_method_fficomputedvideo_compute(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIComputedVideo: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiComputedVideo

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedVideo {
        return FfiComputedVideo(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiComputedVideo) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiComputedVideo {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiComputedVideo, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedVideo_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedVideo {
    return try FfiConverterTypeFFIComputedVideo.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedVideo_lower(_ value: FfiComputedVideo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIComputedVideo.lower(value)
}




public struct LivePhotoConfig {
    public var source: ComputedLivePhotoSource

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: ComputedLivePhotoSource) {
        self.source = source
    }
}

#if compiler(>=6)
extension LivePhotoConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLivePhotoConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LivePhotoConfig {
        return
            try LivePhotoConfig(
                source: FfiConverterTypeComputedLivePhotoSource.read(from: &buf)
        )
    }

    public static func write(_ value: LivePhotoConfig, into buf: inout [UInt8]) {
        FfiConverterTypeComputedLivePhotoSource.write(value.source, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhotoConfig_lift(_ buf: RustBuffer) throws -> LivePhotoConfig {
    return try FfiConverterTypeLivePhotoConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhotoConfig_lower(_ value: LivePhotoConfig) -> RustBuffer {
    return FfiConverterTypeLivePhotoConfig.lower(value)
}


public struct LivePhotoSource {
    public var image: Str
    public var video: Str

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(image: Str, video: Str) {
        self.image = image
        self.video = video
    }
}

#if compiler(>=6)
extension LivePhotoSource: Sendable {}
#endif


extension LivePhotoSource: Equatable, Hashable {
    public static func ==(lhs: LivePhotoSource, rhs: LivePhotoSource) -> Bool {
        if lhs.image != rhs.image {
            return false
        }
        if lhs.video != rhs.video {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(image)
        hasher.combine(video)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLivePhotoSource: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LivePhotoSource {
        return
            try LivePhotoSource(
                image: FfiConverterTypeStr.read(from: &buf), 
                video: FfiConverterTypeStr.read(from: &buf)
        )
    }

    public static func write(_ value: LivePhotoSource, into buf: inout [UInt8]) {
        FfiConverterTypeStr.write(value.image, into: &buf)
        FfiConverterTypeStr.write(value.video, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhotoSource_lift(_ buf: RustBuffer) throws -> LivePhotoSource {
    return try FfiConverterTypeLivePhotoSource.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhotoSource_lower(_ value: LivePhotoSource) -> RustBuffer {
    return FfiConverterTypeLivePhotoSource.lower(value)
}


public struct MediaPickerConfig {
    public var selection: ComputedSelected
    public var filter: ComputedMediaFilter

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(selection: ComputedSelected, filter: ComputedMediaFilter) {
        self.selection = selection
        self.filter = filter
    }
}

#if compiler(>=6)
extension MediaPickerConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMediaPickerConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MediaPickerConfig {
        return
            try MediaPickerConfig(
                selection: FfiConverterTypeComputedSelected.read(from: &buf), 
                filter: FfiConverterTypeComputedMediaFilter.read(from: &buf)
        )
    }

    public static func write(_ value: MediaPickerConfig, into buf: inout [UInt8]) {
        FfiConverterTypeComputedSelected.write(value.selection, into: &buf)
        FfiConverterTypeComputedMediaFilter.write(value.filter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaPickerConfig_lift(_ buf: RustBuffer) throws -> MediaPickerConfig {
    return try FfiConverterTypeMediaPickerConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaPickerConfig_lower(_ value: MediaPickerConfig) -> RustBuffer {
    return FfiConverterTypeMediaPickerConfig.lower(value)
}


public struct PhotoConfig {
    public var source: Str
    public var placeholder: AnyView

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: Str, placeholder: AnyView) {
        self.source = source
        self.placeholder = placeholder
    }
}

#if compiler(>=6)
extension PhotoConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePhotoConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PhotoConfig {
        return
            try PhotoConfig(
                source: FfiConverterTypeStr.read(from: &buf), 
                placeholder: FfiConverterTypeAnyView.read(from: &buf)
        )
    }

    public static func write(_ value: PhotoConfig, into buf: inout [UInt8]) {
        FfiConverterTypeStr.write(value.source, into: &buf)
        FfiConverterTypeAnyView.write(value.placeholder, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePhotoConfig_lift(_ buf: RustBuffer) throws -> PhotoConfig {
    return try FfiConverterTypePhotoConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePhotoConfig_lower(_ value: PhotoConfig) -> RustBuffer {
    return FfiConverterTypePhotoConfig.lower(value)
}


public struct Video {
    public var url: Str

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(url: Str) {
        self.url = url
    }
}

#if compiler(>=6)
extension Video: Sendable {}
#endif


extension Video: Equatable, Hashable {
    public static func ==(lhs: Video, rhs: Video) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVideo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Video {
        return
            try Video(
                url: FfiConverterTypeStr.read(from: &buf)
        )
    }

    public static func write(_ value: Video, into buf: inout [UInt8]) {
        FfiConverterTypeStr.write(value.url, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideo_lift(_ buf: RustBuffer) throws -> Video {
    return try FfiConverterTypeVideo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideo_lower(_ value: Video) -> RustBuffer {
    return FfiConverterTypeVideo.lower(value)
}


public struct VideoPlayerConfig {
    public var video: ComputedVideo
    public var volume: Bindingf64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(video: ComputedVideo, volume: Bindingf64) {
        self.video = video
        self.volume = volume
    }
}

#if compiler(>=6)
extension VideoPlayerConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVideoPlayerConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VideoPlayerConfig {
        return
            try VideoPlayerConfig(
                video: FfiConverterTypeComputedVideo.read(from: &buf), 
                volume: FfiConverterTypeBindingf64.read(from: &buf)
        )
    }

    public static func write(_ value: VideoPlayerConfig, into buf: inout [UInt8]) {
        FfiConverterTypeComputedVideo.write(value.video, into: &buf)
        FfiConverterTypeBindingf64.write(value.volume, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoPlayerConfig_lift(_ buf: RustBuffer) throws -> VideoPlayerConfig {
    return try FfiConverterTypeVideoPlayerConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoPlayerConfig_lower(_ value: VideoPlayerConfig) -> RustBuffer {
    return FfiConverterTypeVideoPlayerConfig.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Media {
    
    case image(Str
    )
    case livePhoto(LivePhotoSource
    )
    case video(Str
    )
}


#if compiler(>=6)
extension Media: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMedia: FfiConverterRustBuffer {
    typealias SwiftType = Media

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Media {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .image(try FfiConverterTypeStr.read(from: &buf)
        )
        
        case 2: return .livePhoto(try FfiConverterTypeLivePhotoSource.read(from: &buf)
        )
        
        case 3: return .video(try FfiConverterTypeStr.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Media, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .image(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeStr.write(v1, into: &buf)
            
        
        case let .livePhoto(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLivePhotoSource.write(v1, into: &buf)
            
        
        case let .video(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeStr.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMedia_lift(_ buf: RustBuffer) throws -> Media {
    return try FfiConverterTypeMedia.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMedia_lower(_ value: Media) -> RustBuffer {
    return FfiConverterTypeMedia.lower(value)
}


extension Media: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum MediaFilter {
    
    case livePhoto
    case video
    case image
    case all([MediaFilter]
    )
    case not([MediaFilter]
    )
    case any([MediaFilter]
    )
}


#if compiler(>=6)
extension MediaFilter: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMediaFilter: FfiConverterRustBuffer {
    typealias SwiftType = MediaFilter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MediaFilter {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .livePhoto
        
        case 2: return .video
        
        case 3: return .image
        
        case 4: return .all(try FfiConverterSequenceTypeMediaFilter.read(from: &buf)
        )
        
        case 5: return .not(try FfiConverterSequenceTypeMediaFilter.read(from: &buf)
        )
        
        case 6: return .any(try FfiConverterSequenceTypeMediaFilter.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MediaFilter, into buf: inout [UInt8]) {
        switch value {
        
        
        case .livePhoto:
            writeInt(&buf, Int32(1))
        
        
        case .video:
            writeInt(&buf, Int32(2))
        
        
        case .image:
            writeInt(&buf, Int32(3))
        
        
        case let .all(v1):
            writeInt(&buf, Int32(4))
            FfiConverterSequenceTypeMediaFilter.write(v1, into: &buf)
            
        
        case let .not(v1):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceTypeMediaFilter.write(v1, into: &buf)
            
        
        case let .any(v1):
            writeInt(&buf, Int32(6))
            FfiConverterSequenceTypeMediaFilter.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaFilter_lift(_ buf: RustBuffer) throws -> MediaFilter {
    return try FfiConverterTypeMediaFilter.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaFilter_lower(_ value: MediaFilter) -> RustBuffer {
    return FfiConverterTypeMediaFilter.lower(value)
}


extension MediaFilter: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMediaFilter: FfiConverterRustBuffer {
    typealias SwiftType = [MediaFilter]

    public static func write(_ value: [MediaFilter], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMediaFilter.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MediaFilter] {
        let len: Int32 = try readInt(&buf)
        var seq = [MediaFilter]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMediaFilter.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ComputedLivePhotoSource = FfiComputedLivePhotoSource

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeComputedLivePhotoSource: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputedLivePhotoSource {
        return try FfiConverterTypeFFIComputedLivePhotoSource.read(from: &buf)
    }

    public static func write(_ value: ComputedLivePhotoSource, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIComputedLivePhotoSource.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ComputedLivePhotoSource {
        return try FfiConverterTypeFFIComputedLivePhotoSource_lift(value)
    }

    public static func lower(_ value: ComputedLivePhotoSource) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIComputedLivePhotoSource_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedLivePhotoSource_lift(_ value: UnsafeMutableRawPointer) throws -> ComputedLivePhotoSource {
    return try FfiConverterTypeComputedLivePhotoSource.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedLivePhotoSource_lower(_ value: ComputedLivePhotoSource) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComputedLivePhotoSource.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ComputedMediaFilter = FfiComputedMediaFilter

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeComputedMediaFilter: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputedMediaFilter {
        return try FfiConverterTypeFFIComputedMediaFilter.read(from: &buf)
    }

    public static func write(_ value: ComputedMediaFilter, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIComputedMediaFilter.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ComputedMediaFilter {
        return try FfiConverterTypeFFIComputedMediaFilter_lift(value)
    }

    public static func lower(_ value: ComputedMediaFilter) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIComputedMediaFilter_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedMediaFilter_lift(_ value: UnsafeMutableRawPointer) throws -> ComputedMediaFilter {
    return try FfiConverterTypeComputedMediaFilter.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedMediaFilter_lower(_ value: ComputedMediaFilter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComputedMediaFilter.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ComputedSelected = FfiComputedSelected

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeComputedSelected: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputedSelected {
        return try FfiConverterTypeFFIComputedSelected.read(from: &buf)
    }

    public static func write(_ value: ComputedSelected, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIComputedSelected.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ComputedSelected {
        return try FfiConverterTypeFFIComputedSelected_lift(value)
    }

    public static func lower(_ value: ComputedSelected) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIComputedSelected_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedSelected_lift(_ value: UnsafeMutableRawPointer) throws -> ComputedSelected {
    return try FfiConverterTypeComputedSelected.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedSelected_lower(_ value: ComputedSelected) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComputedSelected.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ComputedVideo = FfiComputedVideo

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeComputedVideo: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputedVideo {
        return try FfiConverterTypeFFIComputedVideo.read(from: &buf)
    }

    public static func write(_ value: ComputedVideo, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIComputedVideo.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ComputedVideo {
        return try FfiConverterTypeFFIComputedVideo_lift(value)
    }

    public static func lower(_ value: ComputedVideo) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIComputedVideo_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedVideo_lift(_ value: UnsafeMutableRawPointer) throws -> ComputedVideo {
    return try FfiConverterTypeComputedVideo.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedVideo_lower(_ value: ComputedVideo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComputedVideo.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias LivePhoto = LivePhotoConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLivePhoto: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LivePhoto {
        return try FfiConverterTypeLivePhotoConfig.read(from: &buf)
    }

    public static func write(_ value: LivePhoto, into buf: inout [UInt8]) {
        return FfiConverterTypeLivePhotoConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> LivePhoto {
        return try FfiConverterTypeLivePhotoConfig_lift(value)
    }

    public static func lower(_ value: LivePhoto) -> RustBuffer {
        return FfiConverterTypeLivePhotoConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhoto_lift(_ value: RustBuffer) throws -> LivePhoto {
    return try FfiConverterTypeLivePhoto.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLivePhoto_lower(_ value: LivePhoto) -> RustBuffer {
    return FfiConverterTypeLivePhoto.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias MediaPicker = MediaPickerConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMediaPicker: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MediaPicker {
        return try FfiConverterTypeMediaPickerConfig.read(from: &buf)
    }

    public static func write(_ value: MediaPicker, into buf: inout [UInt8]) {
        return FfiConverterTypeMediaPickerConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> MediaPicker {
        return try FfiConverterTypeMediaPickerConfig_lift(value)
    }

    public static func lower(_ value: MediaPicker) -> RustBuffer {
        return FfiConverterTypeMediaPickerConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaPicker_lift(_ value: RustBuffer) throws -> MediaPicker {
    return try FfiConverterTypeMediaPicker.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMediaPicker_lower(_ value: MediaPicker) -> RustBuffer {
    return FfiConverterTypeMediaPicker.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Photo = PhotoConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePhoto: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Photo {
        return try FfiConverterTypePhotoConfig.read(from: &buf)
    }

    public static func write(_ value: Photo, into buf: inout [UInt8]) {
        return FfiConverterTypePhotoConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Photo {
        return try FfiConverterTypePhotoConfig_lift(value)
    }

    public static func lower(_ value: Photo) -> RustBuffer {
        return FfiConverterTypePhotoConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePhoto_lift(_ value: RustBuffer) throws -> Photo {
    return try FfiConverterTypePhoto.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePhoto_lower(_ value: Photo) -> RustBuffer {
    return FfiConverterTypePhoto.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Selected = UInt32

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSelected: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Selected {
        return try FfiConverterUInt32.read(from: &buf)
    }

    public static func write(_ value: Selected, into buf: inout [UInt8]) {
        return FfiConverterUInt32.write(value, into: &buf)
    }

    public static func lift(_ value: UInt32) throws -> Selected {
        return try FfiConverterUInt32.lift(value)
    }

    public static func lower(_ value: Selected) -> UInt32 {
        return FfiConverterUInt32.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSelected_lift(_ value: UInt32) throws -> Selected {
    return try FfiConverterTypeSelected.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSelected_lower(_ value: Selected) -> UInt32 {
    return FfiConverterTypeSelected.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias VideoPlayer = VideoPlayerConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVideoPlayer: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VideoPlayer {
        return try FfiConverterTypeVideoPlayerConfig.read(from: &buf)
    }

    public static func write(_ value: VideoPlayer, into buf: inout [UInt8]) {
        return FfiConverterTypeVideoPlayerConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> VideoPlayer {
        return try FfiConverterTypeVideoPlayerConfig_lift(value)
    }

    public static func lower(_ value: VideoPlayer) -> RustBuffer {
        return FfiConverterTypeVideoPlayerConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoPlayer_lift(_ value: RustBuffer) throws -> VideoPlayer {
    return try FfiConverterTypeVideoPlayer.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVideoPlayer_lower(_ value: VideoPlayer) -> RustBuffer {
    return FfiConverterTypeVideoPlayer.lower(value)
}


private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_waterui_media_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_waterui_media_checksum_method_fficomputedlivephotosource_compute() != 62253) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_media_checksum_method_fficomputedmediafilter_compute() != 17643) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_media_checksum_method_fficomputedselected_compute() != 2927) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_media_checksum_method_fficomputedvideo_compute() != 26621) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiEnsureWateruiStrInitialized()
    uniffiEnsureWateruiReactiveInitialized()
    uniffiEnsureWateruiCoreInitialized()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureWateruiMediaInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all