// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(waterui_coreFFI)
import waterui_coreFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_waterui_core_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_waterui_core_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureWateruiCoreInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}




public protocol FfiActionObjectProtocol: AnyObject, Sendable {
    
    func handle(env: Environment) 
    
}
open class FfiActionObject: FfiActionObjectProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_core_fn_clone_ffiactionobject(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_core_fn_free_ffiactionobject(pointer, $0) }
    }

    

    
open func handle(env: Environment)  {try! rustCall() {
    uniffi_waterui_core_fn_method_ffiactionobject_handle(self.uniffiClonePointer(),
        FfiConverterTypeEnvironment_lower(env),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIActionObject: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiActionObject

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiActionObject {
        return FfiActionObject(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiActionObject) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiActionObject {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiActionObject, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIActionObject_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiActionObject {
    return try FfiConverterTypeFFIActionObject.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIActionObject_lower(_ value: FfiActionObject) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIActionObject.lower(value)
}






public protocol FfiAnyViewProtocol: AnyObject, Sendable {
    
    func body(env: Environment)  -> AnyView
    
    func id()  -> String
    
}
open class FfiAnyView: FfiAnyViewProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_core_fn_clone_ffianyview(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_core_fn_free_ffianyview(pointer, $0) }
    }

    

    
open func body(env: Environment) -> AnyView  {
    return try!  FfiConverterTypeAnyView_lift(try! rustCall() {
    uniffi_waterui_core_fn_method_ffianyview_body(self.uniffiClonePointer(),
        FfiConverterTypeEnvironment_lower(env),$0
    )
})
}
    
open func id() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_waterui_core_fn_method_ffianyview_id(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIAnyView: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiAnyView

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiAnyView {
        return FfiAnyView(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiAnyView) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAnyView {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiAnyView, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAnyView_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiAnyView {
    return try FfiConverterTypeFFIAnyView.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIAnyView_lower(_ value: FfiAnyView) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIAnyView.lower(value)
}






public protocol FfiComputedColorProtocol: AnyObject, Sendable {
    
    func compute()  -> Color
    
}
open class FfiComputedColor: FfiComputedColorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_core_fn_clone_fficomputedcolor(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_core_fn_free_fficomputedcolor(pointer, $0) }
    }

    

    
open func compute() -> Color  {
    return try!  FfiConverterTypeColor_lift(try! rustCall() {
    uniffi_waterui_core_fn_method_fficomputedcolor_compute(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIComputedColor: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiComputedColor

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedColor {
        return FfiComputedColor(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiComputedColor) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiComputedColor {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiComputedColor, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedColor_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiComputedColor {
    return try FfiConverterTypeFFIComputedColor.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIComputedColor_lower(_ value: FfiComputedColor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIComputedColor.lower(value)
}






public protocol FfiEnvironmentProtocol: AnyObject, Sendable {
    
}
open class FfiEnvironment: FfiEnvironmentProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_waterui_core_fn_clone_ffienvironment(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_waterui_core_fn_free_ffienvironment(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIEnvironment: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiEnvironment

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiEnvironment {
        return FfiEnvironment(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiEnvironment) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiEnvironment {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiEnvironment, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIEnvironment_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiEnvironment {
    return try FfiConverterTypeFFIEnvironment.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIEnvironment_lower(_ value: FfiEnvironment) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFFIEnvironment.lower(value)
}




/**
 * Represents a color, either in sRGB or P3 color space.
 */
public struct Color {
    public var color: ColorInner
    public var opacity: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(color: ColorInner, opacity: Float) {
        self.color = color
        self.opacity = opacity
    }
}

#if compiler(>=6)
extension Color: Sendable {}
#endif


extension Color: Equatable, Hashable {
    public static func ==(lhs: Color, rhs: Color) -> Bool {
        if lhs.color != rhs.color {
            return false
        }
        if lhs.opacity != rhs.opacity {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(color)
        hasher.combine(opacity)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeColor: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Color {
        return
            try Color(
                color: FfiConverterTypeColorInner.read(from: &buf), 
                opacity: FfiConverterFloat.read(from: &buf)
        )
    }

    public static func write(_ value: Color, into buf: inout [UInt8]) {
        FfiConverterTypeColorInner.write(value.color, into: &buf)
        FfiConverterFloat.write(value.opacity, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColor_lift(_ buf: RustBuffer) throws -> Color {
    return try FfiConverterTypeColor.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColor_lower(_ value: Color) -> RustBuffer {
    return FfiConverterTypeColor.lower(value)
}


public struct FfiRawTaggedView {
    public var tag: Id
    public var content: AnyView

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tag: Id, content: AnyView) {
        self.tag = tag
        self.content = content
    }
}

#if compiler(>=6)
extension FfiRawTaggedView: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIRawTaggedView: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiRawTaggedView {
        return
            try FfiRawTaggedView(
                tag: FfiConverterTypeId.read(from: &buf), 
                content: FfiConverterTypeAnyView.read(from: &buf)
        )
    }

    public static func write(_ value: FfiRawTaggedView, into buf: inout [UInt8]) {
        FfiConverterTypeId.write(value.tag, into: &buf)
        FfiConverterTypeAnyView.write(value.content, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIRawTaggedView_lift(_ buf: RustBuffer) throws -> FfiRawTaggedView {
    return try FfiConverterTypeFFIRawTaggedView.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIRawTaggedView_lower(_ value: FfiRawTaggedView) -> RustBuffer {
    return FfiConverterTypeFFIRawTaggedView.lower(value)
}


/**
 * Represents a P3 color with red, yellow, and blue components.
 */
public struct P3 {
    public var red: Float
    public var yellow: Float
    public var blue: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(red: Float, yellow: Float, blue: Float) {
        self.red = red
        self.yellow = yellow
        self.blue = blue
    }
}

#if compiler(>=6)
extension P3: Sendable {}
#endif


extension P3: Equatable, Hashable {
    public static func ==(lhs: P3, rhs: P3) -> Bool {
        if lhs.red != rhs.red {
            return false
        }
        if lhs.yellow != rhs.yellow {
            return false
        }
        if lhs.blue != rhs.blue {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(red)
        hasher.combine(yellow)
        hasher.combine(blue)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeP3: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> P3 {
        return
            try P3(
                red: FfiConverterFloat.read(from: &buf), 
                yellow: FfiConverterFloat.read(from: &buf), 
                blue: FfiConverterFloat.read(from: &buf)
        )
    }

    public static func write(_ value: P3, into buf: inout [UInt8]) {
        FfiConverterFloat.write(value.red, into: &buf)
        FfiConverterFloat.write(value.yellow, into: &buf)
        FfiConverterFloat.write(value.blue, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeP3_lift(_ buf: RustBuffer) throws -> P3 {
    return try FfiConverterTypeP3.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeP3_lower(_ value: P3) -> RustBuffer {
    return FfiConverterTypeP3.lower(value)
}


/**
 * Rectangle shape with no rounded corners
 *
 * This shape can be used to create rectangular UI elements.
 */
public struct Rectangle {

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {
    }
}

#if compiler(>=6)
extension Rectangle: Sendable {}
#endif


extension Rectangle: Equatable, Hashable {
    public static func ==(lhs: Rectangle, rhs: Rectangle) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRectangle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Rectangle {
        return
            Rectangle()
    }

    public static func write(_ value: Rectangle, into buf: inout [UInt8]) {
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRectangle_lift(_ buf: RustBuffer) throws -> Rectangle {
    return try FfiConverterTypeRectangle.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRectangle_lower(_ value: Rectangle) -> RustBuffer {
    return FfiConverterTypeRectangle.lower(value)
}


/**
 * Represents an sRGB color with red, yellow, and blue components.
 */
public struct Srgb {
    public var red: UInt8
    public var yellow: UInt8
    public var blue: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(red: UInt8, yellow: UInt8, blue: UInt8) {
        self.red = red
        self.yellow = yellow
        self.blue = blue
    }
}

#if compiler(>=6)
extension Srgb: Sendable {}
#endif


extension Srgb: Equatable, Hashable {
    public static func ==(lhs: Srgb, rhs: Srgb) -> Bool {
        if lhs.red != rhs.red {
            return false
        }
        if lhs.yellow != rhs.yellow {
            return false
        }
        if lhs.blue != rhs.blue {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(red)
        hasher.combine(yellow)
        hasher.combine(blue)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSrgb: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Srgb {
        return
            try Srgb(
                red: FfiConverterUInt8.read(from: &buf), 
                yellow: FfiConverterUInt8.read(from: &buf), 
                blue: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Srgb, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.red, into: &buf)
        FfiConverterUInt8.write(value.yellow, into: &buf)
        FfiConverterUInt8.write(value.blue, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSrgb_lift(_ buf: RustBuffer) throws -> Srgb {
    return try FfiConverterTypeSrgb.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSrgb_lower(_ value: Srgb) -> RustBuffer {
    return FfiConverterTypeSrgb.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * An enumeration representing different types of animations
 *
 * This enum provides various animation types for UI elements or graphics:
 * - Linear: Constant speed from start to finish
 * - EaseIn: Starts slow and accelerates
 * - EaseOut: Starts fast and decelerates
 * - EaseInOut: Starts and ends slowly with acceleration in the middle
 * - Spring: Physics-based movement with configurable stiffness and damping
 *
 * Each animation type (except Spring) takes a Duration parameter that specifies
 * how long the animation should take to complete.
 */

public enum Animation {
    
    /**
     * Default animation behavior (uses system defaults)
     */
    case `default`
    /**
     * Linear animation with constant velocity
     */
    case linear(TimeInterval
    )
    /**
     * Ease-in animation that starts slow and accelerates
     */
    case easeIn(TimeInterval
    )
    /**
     * Ease-out animation that starts fast and decelerates
     */
    case easeOut(TimeInterval
    )
    /**
     * Ease-in-out animation that starts and ends slowly with acceleration in the middle
     */
    case easeInOut(TimeInterval
    )
    /**
     * Spring animation with physics-based movement
     */
    case spring(
        /**
         * Stiffness of the spring (higher values create faster animations)
         */stiffness: Float, 
        /**
         * Damping factor to control oscillation (higher values reduce bouncing)
         */damping: Float
    )
}


#if compiler(>=6)
extension Animation: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAnimation: FfiConverterRustBuffer {
    typealias SwiftType = Animation

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Animation {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`default`
        
        case 2: return .linear(try FfiConverterDuration.read(from: &buf)
        )
        
        case 3: return .easeIn(try FfiConverterDuration.read(from: &buf)
        )
        
        case 4: return .easeOut(try FfiConverterDuration.read(from: &buf)
        )
        
        case 5: return .easeInOut(try FfiConverterDuration.read(from: &buf)
        )
        
        case 6: return .spring(stiffness: try FfiConverterFloat.read(from: &buf), damping: try FfiConverterFloat.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Animation, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`default`:
            writeInt(&buf, Int32(1))
        
        
        case let .linear(v1):
            writeInt(&buf, Int32(2))
            FfiConverterDuration.write(v1, into: &buf)
            
        
        case let .easeIn(v1):
            writeInt(&buf, Int32(3))
            FfiConverterDuration.write(v1, into: &buf)
            
        
        case let .easeOut(v1):
            writeInt(&buf, Int32(4))
            FfiConverterDuration.write(v1, into: &buf)
            
        
        case let .easeInOut(v1):
            writeInt(&buf, Int32(5))
            FfiConverterDuration.write(v1, into: &buf)
            
        
        case let .spring(stiffness,damping):
            writeInt(&buf, Int32(6))
            FfiConverterFloat.write(stiffness, into: &buf)
            FfiConverterFloat.write(damping, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnimation_lift(_ buf: RustBuffer) throws -> Animation {
    return try FfiConverterTypeAnimation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnimation_lower(_ value: Animation) -> RustBuffer {
    return FfiConverterTypeAnimation.lower(value)
}


extension Animation: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ColorInner {
    
    case srgb(Srgb
    )
    case p3(P3
    )
}


#if compiler(>=6)
extension ColorInner: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeColorInner: FfiConverterRustBuffer {
    typealias SwiftType = ColorInner

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ColorInner {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .srgb(try FfiConverterTypeSrgb.read(from: &buf)
        )
        
        case 2: return .p3(try FfiConverterTypeP3.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ColorInner, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .srgb(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSrgb.write(v1, into: &buf)
            
        
        case let .p3(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeP3.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColorInner_lift(_ buf: RustBuffer) throws -> ColorInner {
    return try FfiConverterTypeColorInner.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColorInner_lower(_ value: ColorInner) -> RustBuffer {
    return FfiConverterTypeColorInner.lower(value)
}


extension ColorInner: Equatable, Hashable {}




/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ActionObject = FfiActionObject

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeActionObject: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActionObject {
        return try FfiConverterTypeFFIActionObject.read(from: &buf)
    }

    public static func write(_ value: ActionObject, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIActionObject.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ActionObject {
        return try FfiConverterTypeFFIActionObject_lift(value)
    }

    public static func lower(_ value: ActionObject) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIActionObject_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeActionObject_lift(_ value: UnsafeMutableRawPointer) throws -> ActionObject {
    return try FfiConverterTypeActionObject.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeActionObject_lower(_ value: ActionObject) -> UnsafeMutableRawPointer {
    return FfiConverterTypeActionObject.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AnyView = FfiAnyView

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAnyView: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AnyView {
        return try FfiConverterTypeFFIAnyView.read(from: &buf)
    }

    public static func write(_ value: AnyView, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIAnyView.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> AnyView {
        return try FfiConverterTypeFFIAnyView_lift(value)
    }

    public static func lower(_ value: AnyView) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIAnyView_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyView_lift(_ value: UnsafeMutableRawPointer) throws -> AnyView {
    return try FfiConverterTypeAnyView.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyView_lower(_ value: AnyView) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAnyView.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ComputedColor = FfiComputedColor

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeComputedColor: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputedColor {
        return try FfiConverterTypeFFIComputedColor.read(from: &buf)
    }

    public static func write(_ value: ComputedColor, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIComputedColor.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> ComputedColor {
        return try FfiConverterTypeFFIComputedColor_lift(value)
    }

    public static func lower(_ value: ComputedColor) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIComputedColor_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedColor_lift(_ value: UnsafeMutableRawPointer) throws -> ComputedColor {
    return try FfiConverterTypeComputedColor.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeComputedColor_lower(_ value: ComputedColor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComputedColor.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Environment = FfiEnvironment

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEnvironment: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Environment {
        return try FfiConverterTypeFFIEnvironment.read(from: &buf)
    }

    public static func write(_ value: Environment, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIEnvironment.write(value, into: &buf)
    }

    public static func lift(_ value: UnsafeMutableRawPointer) throws -> Environment {
        return try FfiConverterTypeFFIEnvironment_lift(value)
    }

    public static func lower(_ value: Environment) -> UnsafeMutableRawPointer {
        return FfiConverterTypeFFIEnvironment_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEnvironment_lift(_ value: UnsafeMutableRawPointer) throws -> Environment {
    return try FfiConverterTypeEnvironment.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEnvironment_lower(_ value: Environment) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEnvironment.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Id = Int32

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return try FfiConverterInt32.read(from: &buf)
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        return FfiConverterInt32.write(value, into: &buf)
    }

    public static func lift(_ value: Int32) throws -> Id {
        return try FfiConverterInt32.lift(value)
    }

    public static func lower(_ value: Id) -> Int32 {
        return FfiConverterInt32.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lift(_ value: Int32) throws -> Id {
    return try FfiConverterTypeId.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeId_lower(_ value: Id) -> Int32 {
    return FfiConverterTypeId.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Label = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLabel: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Label {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Label, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Label {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Label) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabel_lift(_ value: RustBuffer) throws -> Label {
    return try FfiConverterTypeLabel.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabel_lower(_ value: Label) -> RustBuffer {
    return FfiConverterTypeLabel.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RawTaggedView = FfiRawTaggedView

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRawTaggedView: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RawTaggedView {
        return try FfiConverterTypeFFIRawTaggedView.read(from: &buf)
    }

    public static func write(_ value: RawTaggedView, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIRawTaggedView.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> RawTaggedView {
        return try FfiConverterTypeFFIRawTaggedView_lift(value)
    }

    public static func lower(_ value: RawTaggedView) -> RustBuffer {
        return FfiConverterTypeFFIRawTaggedView_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRawTaggedView_lift(_ value: RustBuffer) throws -> RawTaggedView {
    return try FfiConverterTypeRawTaggedView.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRawTaggedView_lower(_ value: RawTaggedView) -> RustBuffer {
    return FfiConverterTypeRawTaggedView.lower(value)
}


private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_waterui_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_waterui_core_checksum_method_ffiactionobject_handle() != 21259) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_core_checksum_method_ffianyview_body() != 21120) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_core_checksum_method_ffianyview_id() != 10293) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_waterui_core_checksum_method_fficomputedcolor_compute() != 55639) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureWateruiCoreInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all