// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(wateruiFFI)
import wateruiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_waterui_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_waterui_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureWateruiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


/**
 * Configuration for the Badge component
 */
public struct BadgeConfig {
    /**
     * The numeric value to display on the badge
     */
    public var value: Computedi32
    /**
     * The content that the badge will be attached to
     */
    public var content: AnyView
    /**
     * The color of the badge
     */
    public var color: ComputedColor

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The numeric value to display on the badge
         */value: Computedi32, 
        /**
         * The content that the badge will be attached to
         */content: AnyView, 
        /**
         * The color of the badge
         */color: ComputedColor) {
        self.value = value
        self.content = content
        self.color = color
    }
}

#if compiler(>=6)
extension BadgeConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBadgeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BadgeConfig {
        return
            try BadgeConfig(
                value: FfiConverterTypeComputedi32.read(from: &buf), 
                content: FfiConverterTypeAnyView.read(from: &buf), 
                color: FfiConverterTypeComputedColor.read(from: &buf)
        )
    }

    public static func write(_ value: BadgeConfig, into buf: inout [UInt8]) {
        FfiConverterTypeComputedi32.write(value.value, into: &buf)
        FfiConverterTypeAnyView.write(value.content, into: &buf)
        FfiConverterTypeComputedColor.write(value.color, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBadgeConfig_lift(_ buf: RustBuffer) throws -> BadgeConfig {
    return try FfiConverterTypeBadgeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBadgeConfig_lower(_ value: BadgeConfig) -> RustBuffer {
    return FfiConverterTypeBadgeConfig.lower(value)
}


/**
 * A structure representing a blur filter operation.
 */
public struct Blur {
    /**
     * The radius of the blur effect in pixels.
     */
    public var radius: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The radius of the blur effect in pixels.
         */radius: Double) {
        self.radius = radius
    }
}

#if compiler(>=6)
extension Blur: Sendable {}
#endif


extension Blur: Equatable, Hashable {
    public static func ==(lhs: Blur, rhs: Blur) -> Bool {
        if lhs.radius != rhs.radius {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(radius)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlur: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Blur {
        return
            try Blur(
                radius: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Blur, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.radius, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlur_lift(_ buf: RustBuffer) throws -> Blur {
    return try FfiConverterTypeBlur.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlur_lower(_ value: Blur) -> RustBuffer {
    return FfiConverterTypeBlur.lower(value)
}


/**
 * A structure representing a brightness adjustment filter.
 */
public struct Brightness {
    /**
     * The amount of brightness adjustment.
     * Values above 1.0 increase brightness, values below 1.0 decrease brightness.
     */
    public var amount: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The amount of brightness adjustment.
         * Values above 1.0 increase brightness, values below 1.0 decrease brightness.
         */amount: Double) {
        self.amount = amount
    }
}

#if compiler(>=6)
extension Brightness: Sendable {}
#endif


extension Brightness: Equatable, Hashable {
    public static func ==(lhs: Brightness, rhs: Brightness) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBrightness: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Brightness {
        return
            try Brightness(
                amount: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Brightness, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.amount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBrightness_lift(_ buf: RustBuffer) throws -> Brightness {
    return try FfiConverterTypeBrightness.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBrightness_lower(_ value: Brightness) -> RustBuffer {
    return FfiConverterTypeBrightness.lower(value)
}


/**
 * Configuration for a button component.
 *
 * Use the `Button` struct's methods to customize these properties.
 */
public struct ButtonConfig {
    /**
     * The label displayed on the button
     */
    public var label: AnyView
    /**
     * The action to execute when the button is clicked
     */
    public var action: ActionObject

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The label displayed on the button
         */label: AnyView, 
        /**
         * The action to execute when the button is clicked
         */action: ActionObject) {
        self.label = label
        self.action = action
    }
}

#if compiler(>=6)
extension ButtonConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeButtonConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ButtonConfig {
        return
            try ButtonConfig(
                label: FfiConverterTypeAnyView.read(from: &buf), 
                action: FfiConverterTypeActionObject.read(from: &buf)
        )
    }

    public static func write(_ value: ButtonConfig, into buf: inout [UInt8]) {
        FfiConverterTypeAnyView.write(value.label, into: &buf)
        FfiConverterTypeActionObject.write(value.action, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeButtonConfig_lift(_ buf: RustBuffer) throws -> ButtonConfig {
    return try FfiConverterTypeButtonConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeButtonConfig_lower(_ value: ButtonConfig) -> RustBuffer {
    return FfiConverterTypeButtonConfig.lower(value)
}


/**
 * A structure representing a contrast adjustment filter.
 */
public struct Contrast {
    /**
     * The amount of contrast adjustment.
     * Values above 1.0 increase contrast, values below 1.0 decrease contrast.
     */
    public var amount: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The amount of contrast adjustment.
         * Values above 1.0 increase contrast, values below 1.0 decrease contrast.
         */amount: Double) {
        self.amount = amount
    }
}

#if compiler(>=6)
extension Contrast: Sendable {}
#endif


extension Contrast: Equatable, Hashable {
    public static func ==(lhs: Contrast, rhs: Contrast) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContrast: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contrast {
        return
            try Contrast(
                amount: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Contrast, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.amount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContrast_lift(_ buf: RustBuffer) throws -> Contrast {
    return try FfiConverterTypeContrast.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContrast_lower(_ value: Contrast) -> RustBuffer {
    return FfiConverterTypeContrast.lower(value)
}


/**
 * A divider component that can be used to separate content.
 */
public struct Divider {

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {
    }
}

#if compiler(>=6)
extension Divider: Sendable {}
#endif


extension Divider: Equatable, Hashable {
    public static func ==(lhs: Divider, rhs: Divider) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDivider: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Divider {
        return
            Divider()
    }

    public static func write(_ value: Divider, into buf: inout [UInt8]) {
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDivider_lift(_ buf: RustBuffer) throws -> Divider {
    return try FfiConverterTypeDivider.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDivider_lower(_ value: Divider) -> RustBuffer {
    return FfiConverterTypeDivider.lower(value)
}


public struct FfiVectorFloat {
    public var x: Float
    public var y: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(x: Float, y: Float) {
        self.x = x
        self.y = y
    }
}

#if compiler(>=6)
extension FfiVectorFloat: Sendable {}
#endif


extension FfiVectorFloat: Equatable, Hashable {
    public static func ==(lhs: FfiVectorFloat, rhs: FfiVectorFloat) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFFIVectorFloat: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiVectorFloat {
        return
            try FfiVectorFloat(
                x: FfiConverterFloat.read(from: &buf), 
                y: FfiConverterFloat.read(from: &buf)
        )
    }

    public static func write(_ value: FfiVectorFloat, into buf: inout [UInt8]) {
        FfiConverterFloat.write(value.x, into: &buf)
        FfiConverterFloat.write(value.y, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIVectorFloat_lift(_ buf: RustBuffer) throws -> FfiVectorFloat {
    return try FfiConverterTypeFFIVectorFloat.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFFIVectorFloat_lower(_ value: FfiVectorFloat) -> RustBuffer {
    return FfiConverterTypeFFIVectorFloat.lower(value)
}


/**
 * A structure representing a grayscale filter.
 */
public struct Grayscale {
    /**
     * The intensity of the grayscale effect.
     * 0.0 means no effect, 1.0 means full grayscale.
     */
    public var intensity: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The intensity of the grayscale effect.
         * 0.0 means no effect, 1.0 means full grayscale.
         */intensity: Double) {
        self.intensity = intensity
    }
}

#if compiler(>=6)
extension Grayscale: Sendable {}
#endif


extension Grayscale: Equatable, Hashable {
    public static func ==(lhs: Grayscale, rhs: Grayscale) -> Bool {
        if lhs.intensity != rhs.intensity {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(intensity)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGrayscale: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Grayscale {
        return
            try Grayscale(
                intensity: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Grayscale, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.intensity, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGrayscale_lift(_ buf: RustBuffer) throws -> Grayscale {
    return try FfiConverterTypeGrayscale.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGrayscale_lower(_ value: Grayscale) -> RustBuffer {
    return FfiConverterTypeGrayscale.lower(value)
}


/**
 * A structure representing a hue rotation filter.
 */
public struct HueRotation {
    /**
     * The angle of rotation in degrees.
     */
    public var angle: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The angle of rotation in degrees.
         */angle: Double) {
        self.angle = angle
    }
}

#if compiler(>=6)
extension HueRotation: Sendable {}
#endif


extension HueRotation: Equatable, Hashable {
    public static func ==(lhs: HueRotation, rhs: HueRotation) -> Bool {
        if lhs.angle != rhs.angle {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(angle)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHueRotation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HueRotation {
        return
            try HueRotation(
                angle: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: HueRotation, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.angle, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHueRotation_lift(_ buf: RustBuffer) throws -> HueRotation {
    return try FfiConverterTypeHueRotation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHueRotation_lower(_ value: HueRotation) -> RustBuffer {
    return FfiConverterTypeHueRotation.lower(value)
}


/**
 * A structure representing an inversion filter.
 */
public struct Invert {
    /**
     * The intensity of the inversion effect.
     * 0.0 means no effect, 1.0 means full inversion.
     */
    public var intensity: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The intensity of the inversion effect.
         * 0.0 means no effect, 1.0 means full inversion.
         */intensity: Double) {
        self.intensity = intensity
    }
}

#if compiler(>=6)
extension Invert: Sendable {}
#endif


extension Invert: Equatable, Hashable {
    public static func ==(lhs: Invert, rhs: Invert) -> Bool {
        if lhs.intensity != rhs.intensity {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(intensity)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInvert: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Invert {
        return
            try Invert(
                intensity: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Invert, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.intensity, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInvert_lift(_ buf: RustBuffer) throws -> Invert {
    return try FfiConverterTypeInvert.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInvert_lower(_ value: Invert) -> RustBuffer {
    return FfiConverterTypeInvert.lower(value)
}


/**
 * Configuration for progress indicators.
 *
 * Contains the visual and behavioral properties of a progress indicator.
 */
public struct ProgressConfig {
    /**
     * The label displayed alongside the progress indicator.
     */
    public var label: AnyView
    /**
     * The label displaying the numerical value of the progress.
     */
    public var valueLabel: AnyView
    /**
     * The computed progress value between 0.0 and 1.0.
     */
    public var value: Computedf64
    /**
     * The visual style of the progress indicator (linear or circular).
     */
    public var style: ProgressStyle

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The label displayed alongside the progress indicator.
         */label: AnyView, 
        /**
         * The label displaying the numerical value of the progress.
         */valueLabel: AnyView, 
        /**
         * The computed progress value between 0.0 and 1.0.
         */value: Computedf64, 
        /**
         * The visual style of the progress indicator (linear or circular).
         */style: ProgressStyle) {
        self.label = label
        self.valueLabel = valueLabel
        self.value = value
        self.style = style
    }
}

#if compiler(>=6)
extension ProgressConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProgressConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProgressConfig {
        return
            try ProgressConfig(
                label: FfiConverterTypeAnyView.read(from: &buf), 
                valueLabel: FfiConverterTypeAnyView.read(from: &buf), 
                value: FfiConverterTypeComputedf64.read(from: &buf), 
                style: FfiConverterTypeProgressStyle.read(from: &buf)
        )
    }

    public static func write(_ value: ProgressConfig, into buf: inout [UInt8]) {
        FfiConverterTypeAnyView.write(value.label, into: &buf)
        FfiConverterTypeAnyView.write(value.valueLabel, into: &buf)
        FfiConverterTypeComputedf64.write(value.value, into: &buf)
        FfiConverterTypeProgressStyle.write(value.style, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgressConfig_lift(_ buf: RustBuffer) throws -> ProgressConfig {
    return try FfiConverterTypeProgressConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgressConfig_lower(_ value: ProgressConfig) -> RustBuffer {
    return FfiConverterTypeProgressConfig.lower(value)
}


/**
 * A structure representing a saturation adjustment filter.
 */
public struct Saturation {
    /**
     * The amount of saturation adjustment.
     * Values above 1.0 increase saturation, values below 1.0 decrease saturation.
     */
    public var amount: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The amount of saturation adjustment.
         * Values above 1.0 increase saturation, values below 1.0 decrease saturation.
         */amount: Double) {
        self.amount = amount
    }
}

#if compiler(>=6)
extension Saturation: Sendable {}
#endif


extension Saturation: Equatable, Hashable {
    public static func ==(lhs: Saturation, rhs: Saturation) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSaturation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Saturation {
        return
            try Saturation(
                amount: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Saturation, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.amount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSaturation_lift(_ buf: RustBuffer) throws -> Saturation {
    return try FfiConverterTypeSaturation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSaturation_lower(_ value: Saturation) -> RustBuffer {
    return FfiConverterTypeSaturation.lower(value)
}


/**
 * Represents a shadow effect that can be applied to UI elements.
 *
 * A shadow is defined by its color, offset from the original element,
 * and blur radius.
 */
public struct Shadow {
    /**
     * The color of the shadow, including alpha for opacity.
     */
    public var color: Color
    /**
     * The offset of the shadow from the original element.
     */
    public var offset: VectorFloat
    /**
     * The blur radius of the shadow in pixels.
     */
    public var radius: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The color of the shadow, including alpha for opacity.
         */color: Color, 
        /**
         * The offset of the shadow from the original element.
         */offset: VectorFloat, 
        /**
         * The blur radius of the shadow in pixels.
         */radius: Float) {
        self.color = color
        self.offset = offset
        self.radius = radius
    }
}

#if compiler(>=6)
extension Shadow: Sendable {}
#endif


extension Shadow: Equatable, Hashable {
    public static func ==(lhs: Shadow, rhs: Shadow) -> Bool {
        if lhs.color != rhs.color {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        if lhs.radius != rhs.radius {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(color)
        hasher.combine(offset)
        hasher.combine(radius)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeShadow: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Shadow {
        return
            try Shadow(
                color: FfiConverterTypeColor.read(from: &buf), 
                offset: FfiConverterTypeVectorFloat.read(from: &buf), 
                radius: FfiConverterFloat.read(from: &buf)
        )
    }

    public static func write(_ value: Shadow, into buf: inout [UInt8]) {
        FfiConverterTypeColor.write(value.color, into: &buf)
        FfiConverterTypeVectorFloat.write(value.offset, into: &buf)
        FfiConverterFloat.write(value.radius, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShadow_lift(_ buf: RustBuffer) throws -> Shadow {
    return try FfiConverterTypeShadow.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShadow_lower(_ value: Shadow) -> RustBuffer {
    return FfiConverterTypeShadow.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Visual style options for progress indicators.
 */

public enum ProgressStyle {
    
    /**
     * A circular spinner-style progress indicator.
     */
    case circular
    /**
     * A linear bar-style progress indicator.
     */
    case linear
}


#if compiler(>=6)
extension ProgressStyle: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProgressStyle: FfiConverterRustBuffer {
    typealias SwiftType = ProgressStyle

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProgressStyle {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .circular
        
        case 2: return .linear
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProgressStyle, into buf: inout [UInt8]) {
        switch value {
        
        
        case .circular:
            writeInt(&buf, Int32(1))
        
        
        case .linear:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgressStyle_lift(_ buf: RustBuffer) throws -> ProgressStyle {
    return try FfiConverterTypeProgressStyle.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgressStyle_lower(_ value: ProgressStyle) -> RustBuffer {
    return FfiConverterTypeProgressStyle.lower(value)
}


extension ProgressStyle: Equatable, Hashable {}




/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Badge = BadgeConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBadge: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Badge {
        return try FfiConverterTypeBadgeConfig.read(from: &buf)
    }

    public static func write(_ value: Badge, into buf: inout [UInt8]) {
        return FfiConverterTypeBadgeConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Badge {
        return try FfiConverterTypeBadgeConfig_lift(value)
    }

    public static func lower(_ value: Badge) -> RustBuffer {
        return FfiConverterTypeBadgeConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBadge_lift(_ value: RustBuffer) throws -> Badge {
    return try FfiConverterTypeBadge.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBadge_lower(_ value: Badge) -> RustBuffer {
    return FfiConverterTypeBadge.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Button = ButtonConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeButton: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Button {
        return try FfiConverterTypeButtonConfig.read(from: &buf)
    }

    public static func write(_ value: Button, into buf: inout [UInt8]) {
        return FfiConverterTypeButtonConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Button {
        return try FfiConverterTypeButtonConfig_lift(value)
    }

    public static func lower(_ value: Button) -> RustBuffer {
        return FfiConverterTypeButtonConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeButton_lift(_ value: RustBuffer) throws -> Button {
    return try FfiConverterTypeButton.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeButton_lower(_ value: Button) -> RustBuffer {
    return FfiConverterTypeButton.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Progress = ProgressConfig

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProgress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Progress {
        return try FfiConverterTypeProgressConfig.read(from: &buf)
    }

    public static func write(_ value: Progress, into buf: inout [UInt8]) {
        return FfiConverterTypeProgressConfig.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Progress {
        return try FfiConverterTypeProgressConfig_lift(value)
    }

    public static func lower(_ value: Progress) -> RustBuffer {
        return FfiConverterTypeProgressConfig_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgress_lift(_ value: RustBuffer) throws -> Progress {
    return try FfiConverterTypeProgress.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProgress_lower(_ value: Progress) -> RustBuffer {
    return FfiConverterTypeProgress.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias VectorFloat = FfiVectorFloat

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVectorFloat: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VectorFloat {
        return try FfiConverterTypeFFIVectorFloat.read(from: &buf)
    }

    public static func write(_ value: VectorFloat, into buf: inout [UInt8]) {
        return FfiConverterTypeFFIVectorFloat.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> VectorFloat {
        return try FfiConverterTypeFFIVectorFloat_lift(value)
    }

    public static func lower(_ value: VectorFloat) -> RustBuffer {
        return FfiConverterTypeFFIVectorFloat_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVectorFloat_lift(_ value: RustBuffer) throws -> VectorFloat {
    return try FfiConverterTypeVectorFloat.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVectorFloat_lower(_ value: VectorFloat) -> RustBuffer {
    return FfiConverterTypeVectorFloat.lower(value)
}


private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_waterui_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }

    uniffiEnsureWateruiCoreInitialized()
    uniffiEnsureWateruiReactiveInitialized()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureWateruiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all